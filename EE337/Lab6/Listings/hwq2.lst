C51 COMPILER V9.55   HWQ2                                                                  09/19/2016 03:47:22 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE HWQ2
OBJECT MODULE PLACED IN .\Objects\hwq2.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE hwq2.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\hwq2
                    -.lst) TABS(2) OBJECT(.\Objects\hwq2.obj)

line level    source

   1          /**
   2           SPI HOMEWORK2 , LABWORK2 (SAME PROGRAM)
   3           */
   4          
   5          /* @section  I N C L U D E S */
   6          #include "at89c5131.h"
   7          #include "stdio.h"
   8          #include "stdlib.h"
   9          #define LCD_data  P2                // LCD Data port
  10          
  11          void SPI_Init();
  12          void LCD_Init();
  13          void Timer_Init();
  14          void LCD_DataWrite(char dat);
  15          void LCD_CmdWrite(char cmd);
  16          void LCD_StringWrite(char * str, unsigned char len);
  17          void LCD_Ready();
  18          void sdelay(int delay);
  19          void delay_ms(int delay);
  20          char int_to_string(int val);
  21          unsigned int a=0;
  22          
  23          sbit CS_BAR = P1^4;                 // Chip Select for the ADC
  24          sbit LCD_rs = P0^0;                 // LCD Register Select
  25          sbit LCD_rw = P0^1;                 // LCD Read/Write
  26          sbit LCD_en = P0^2;                 // LCD Enable
  27          sbit LCD_busy = P2^7;               // LCD Busy Flag
  28          sbit ONULL = P1^0;
  29          bit transmit_completed= 0;          // To check if spi data transmit is complete
  30          bit offset_null = 0;                // Check if offset nulling is enabled
  31          bit roundoff = 0;
  32          int adcVal=0, avgVal=0, initVal=0, adcValue = 0, ten_25ms_counter = 0;
  33          unsigned char serial_data;
  34          unsigned char data_save_high;
  35          unsigned char data_save_low;
  36          unsigned char count=0, i=0;
  37          unsigned char weight[4];
  38          unsigned char voltage[4];
  39          float fweight=0,average=0,sum=0;
  40          char avg_str [10] = {0};
  41          /**
  42          
  43           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
  44           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
  45           *                   P1.4(SSbar)
  46                               P1.6(SCK)
  47           */
  48           
  49          void main(void)
  50          {
  51   1        P3 = 0X00;                      // Make Port 3 output 
  52   1        P2 = 0x00;                      // Make Port 2 output 
  53   1        P1 &= 0xEF;                     // Make P1 Pin4-7 output
  54   1        P0 &= 0xF0;                     // Make Port 0 Pins 0,1,2 output
C51 COMPILER V9.55   HWQ2                                                                  09/19/2016 03:47:22 PAGE 2   

  55   1        
  56   1        SPI_Init();
  57   1        LCD_Init();
  58   1        Timer_Init();
  59   1        
  60   1        while(1)                        // endless 
  61   1        {
  62   2          CS_BAR = 0;                 // enable ADC as slave     
  63   2          SPDAT= 0x01;                // Write start bit to start ADC 
  64   2          while(!transmit_completed); // wait end of transmition;TILL SPIF = 1 i.e. MSB of SPSTA
  65   2          transmit_completed = 0;     // clear software transfert flag 
  66   2          
  67   2          SPDAT= 0x80;        // 80H written to start ADC CH0 single ended sampling,refer ADC datasheet
  68   2          while(!transmit_completed); // wait end of transmition 
  69   2          data_save_high = serial_data & 0x03 ;  
  70   2          transmit_completed = 0;     // clear software transfer flag 
  71   2              
  72   2          SPDAT= 0x00;                // 
  73   2          while(!transmit_completed); // wait end of transmition 
  74   2          data_save_low = serial_data;
  75   2          transmit_completed = 0;     // clear software transfer flag 
  76   2          CS_BAR = 1;                 // disable ADC as slave
  77   2          
  78   2          adcVal = (data_save_high <<8) + (data_save_low);
  79   2          
  80   2          
  81   2          sprintf(avg_str, "%.2f", average);      
  82   2          LCD_StringWrite(avg_str,16);
  83   2          delay_ms(5000);
  84   2          LCD_Init();
  85   2          delay_ms(1000);
  86   2          
  87   2        }
  88   1      }
  89          /**
  90           * FUNCTION_PURPOSE:interrupt
  91           * FUNCTION_INPUTS: void
  92           * FUNCTION_OUTPUTS: transmit_complete is software transfert flag
  93           */
  94          void it_SPI(void) interrupt 9 /* interrupt address is 0x004B, (Address -3)/8 = interrupt no.*/
  95          {
  96   1        switch  ( SPSTA )         /* read and clear spi status register */
  97   1        {
  98   2          case 0x80:  
  99   2            serial_data=SPDAT;   /* read receive data */
 100   2            transmit_completed=1;/* set software flag */
 101   2          break;
 102   2      
 103   2          case 0x10:
 104   2               /* put here for mode fault tasking */  
 105   2          break;
 106   2        
 107   2          case 0x40:
 108   2               /* put here for overrun tasking */ 
 109   2          break;
 110   2        }
 111   1      }
 112          
 113          void timer0_ISR (void) interrupt 1
 114          {
 115   1        TR0 = 0;
 116   1        TH0 = 0x3C; //Initialize TH0
C51 COMPILER V9.55   HWQ2                                                                  09/19/2016 03:47:22 PAGE 3   

 117   1        TL0 = 0xB0; //Initialize TL0
 118   1        if (TF0 == 1)
 119   1        {
 120   2          sum = sum + adcVal;
 121   2          ten_25ms_counter++;
 122   2          if(ten_25ms_counter == 10){
 123   3          average = sum/10;
 124   3          }
 125   2          TF0 = 0;
 126   2        }
 127   1        
 128   1        //a=a+1;//Increment Overflow 
 129   1        //Write averaging of 10 samples code here
 130   1      
 131   1      }
 132          
 133          
 134          /**
 135          
 136           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
 137           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
 138           *                   P1.4(SSbar)
 139                               P1.6(SCK)
 140           */ 
 141          void SPI_Init()
 142          {
 143   1        CS_BAR = 1;                     // DISABLE ADC SLAVE SELECT-CS 
 144   1        SPCON |= 0x20;                  // P1.1(SSBAR) is available as standard I/O pin 
 145   1        SPCON |= 0x01;                  // Fclk Periph/4 AND Fclk Periph=12MHz ,HENCE SCK IE. BAUD RATE=3000KHz 
 146   1        SPCON |= 0x10;                  // Master mode 
 147   1        SPCON &= ~0x08;                 // CPOL=0; transmit mode example|| SCK is 0 at idle state
 148   1        SPCON |= 0x04;                  // CPHA=1; transmit mode example 
 149   1        IEN1 |= 0x04;                   // enable spi interrupt 
 150   1        EA=1;                           // enable interrupts 
 151   1        SPCON |= 0x40;                  // run spi;ENABLE SPI INTERFACE SPEN= 1 
 152   1      }
 153            /**
 154           * FUNCTION_PURPOSE:Timer Initialization
 155           * FUNCTION_INPUTS: void
 156           * FUNCTION_OUTPUTS: none
 157           */
 158          
 159          void Timer_Init()
 160          {
 161   1        // Set Timer0 to work in up counting 16 bit mode. Counts upto 
 162   1        // 65536 depending upon the calues of TH0 and TL0
 163   1        // The timer counts 65536 processor cycles. A processor cycle is 
 164   1        // 12 clocks. FOr 24 MHz, it takes 65536/2 uS to overflow
 165   1          
 166   1        TH0 = 0x3C; //Initialize TH0
 167   1        TL0 = 0xB0; //Initialize TL0
 168   1        TMOD = 0x01; ;  //Configure TMOD 
 169   1        ET0 = 1;  //Set ET0
 170   1        TR0 = 1;//Set TR0
 171   1      }
 172            /**
 173           * FUNCTION_PURPOSE:LCD Initialization
 174           * FUNCTION_INPUTS: void
 175           * FUNCTION_OUTPUTS: none
 176           */
 177          void LCD_Init()
 178          {
C51 COMPILER V9.55   HWQ2                                                                  09/19/2016 03:47:22 PAGE 4   

 179   1        sdelay(100);
 180   1        LCD_CmdWrite(0x38);     // LCD 2lines, 5*7 matrix
 181   1        LCD_CmdWrite(0x0E);     // Display ON cursor ON  Blinking off
 182   1        LCD_CmdWrite(0x01);     // Clear the LCD
 183   1        LCD_CmdWrite(0x80);     // Cursor to First line First Position
 184   1      }
 185          
 186          /**
 187           * FUNCTION_PURPOSE: Write Command to LCD
 188           * FUNCTION_INPUTS: cmd- command to be written
 189           * FUNCTION_OUTPUTS: none
 190           */
 191          void LCD_CmdWrite(char cmd)
 192          {
 193   1        LCD_Ready();
 194   1        LCD_data=cmd;           // Send the command to LCD
 195   1        LCD_rs=0;               // Select the Command Register by pulling LCD_rs LOW
 196   1        LCD_rw=0;               // Select the Write Operation  by pulling RW LOW
 197   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 198   1        sdelay(5);
 199   1        LCD_en=0;
 200   1        sdelay(5);
 201   1      }
 202          
 203          /**
 204           * FUNCTION_PURPOSE: Write Command to LCD
 205           * FUNCTION_INPUTS: dat- data to be written
 206           * FUNCTION_OUTPUTS: none
 207           */
 208          void LCD_DataWrite( char dat)
 209          {
 210   1        LCD_Ready();
 211   1        LCD_data=dat;           // Send the data to LCD
 212   1        LCD_rs=1;               // Select the Data Register by pulling LCD_rs HIGH
 213   1        LCD_rw=0;               // Select the Write Operation by pulling RW LOW
 214   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 215   1        sdelay(5);
 216   1        LCD_en=0;
 217   1        sdelay(5);
 218   1      }
 219          /**
 220           * FUNCTION_PURPOSE: Write a string on the LCD Screen
 221           * FUNCTION_INPUTS: 1. str - pointer to the string to be written, 
 222                              2. length - length of the array
 223           * FUNCTION_OUTPUTS: none
 224           */
 225          void LCD_StringWrite( char * str, unsigned char length)
 226          {
 227   1          while(length>0)
 228   1          {
 229   2              LCD_DataWrite(*str);
 230   2              str++;
 231   2              length--;
 232   2          }
 233   1      }
 234          
 235          /**
 236           * FUNCTION_PURPOSE: To check if the LCD is ready to communicate
 237           * FUNCTION_INPUTS: void
 238           * FUNCTION_OUTPUTS: none
 239           */
 240          void LCD_Ready()
C51 COMPILER V9.55   HWQ2                                                                  09/19/2016 03:47:22 PAGE 5   

 241          {
 242   1        LCD_data = 0xFF;
 243   1        LCD_rs = 0;
 244   1        LCD_rw = 1;
 245   1        LCD_en = 0;
 246   1        sdelay(5);
 247   1        LCD_en = 1;
 248   1        while(LCD_busy == 1)
 249   1        {
 250   2          LCD_en = 0;
 251   2          LCD_en = 1;
 252   2        }
 253   1        LCD_en = 0;
 254   1      }
 255          
 256          /**
 257           * FUNCTION_PURPOSE: A delay of 15us for a 24 MHz crystal
 258           * FUNCTION_INPUTS: void
 259           * FUNCTION_OUTPUTS: none
 260           */
 261          void sdelay(int delay)
 262          {
 263   1        char d=0;
 264   1        while(delay>0)
 265   1        {
 266   2          for(d=0;d<5;d++);
 267   2          delay--;
 268   2        }
 269   1      }
 270          
 271          /**
 272           * FUNCTION_PURPOSE: A delay of around 1000us for a 24MHz crystel
 273           * FUNCTION_INPUTS: void
 274           * FUNCTION_OUTPUTS: none
 275           */
 276          void delay_ms(int delay)
 277          {
 278   1        int d=0;
 279   1        while(delay>0)
 280   1        {
 281   2          for(d=0;d<382;d++);
 282   2          delay--;
 283   2        }
 284   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    549    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     47       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
