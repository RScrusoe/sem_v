C51 COMPILER V9.55   SPI_HOMEWORK                                                          09/20/2016 17:15:35 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE SPI_HOMEWORK
OBJECT MODULE PLACED IN .\Objects\spi_homework.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE spi_homework.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\spi_homework.lst) TABS(2) OBJECT(.\Objects\spi_homework.obj)

line level    source

   1          /**
   2           SPI HOMEWORK2 , LABWORK2 (SAME PROGRAM)
   3           */
   4          
   5          /* @section  I N C L U D E S */
   6          #include "at89c5131.h"
   7          #include "stdio.h"
   8          #define LCD_data  P2                // LCD Data port
   9          
  10          void SPI_Init();
  11          void LCD_Init();
  12          void Timer_Init();
  13          void LCD_DataWrite(char dat);
  14          void LCD_CmdWrite(char cmd);
  15          void LCD_StringWrite(char * str, unsigned char len);
  16          void LCD_Ready();
  17          void sdelay(int delay);
  18          void delay_ms(int delay);
  19          char int_to_string(int val);
  20          
  21          sbit CS_BAR = P1^4;                 // Chip Select for the ADC
  22          sbit LCD_rs = P0^0;                 // LCD Register Select
  23          sbit LCD_rw = P0^1;                 // LCD Read/Write
  24          sbit LCD_en = P0^2;                 // LCD Enable
  25          sbit LCD_busy = P2^7;               // LCD Busy Flag
  26          sbit ONULL = P1^0;
  27          bit transmit_completed= 0;          // To check if spi data transmit is complete
  28          bit offset_null = 0;                // Check if offset nulling is enabled
  29          bit roundoff = 0;
  30          int adcVal=0, avgVal=0, initVal=0, adcValue = 0;
  31          unsigned char serial_data;
  32          unsigned char data_save_high;
  33          unsigned char data_save_low;
  34          unsigned char count=0, i=0;
  35          unsigned char weight[4];
  36          unsigned char voltage[4];
  37          float fweight=0;
  38          //sbit toggle_bit = P3^7;
  39          
  40          /* timer registers */
  41          //sfr TH0 = 0x8C;
  42          //sfr TL0 = 0x8A;
  43          //sfr TCON = 0x88;
  44          //sfr TMOD = 0x89;
  45           /* ----*/
  46           
  47          /**
  48          
  49           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
  50           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
  51           *                   P1.4(SSbar)
  52                               P1.6(SCK)
  53           */
  54           
C51 COMPILER V9.55   SPI_HOMEWORK                                                          09/20/2016 17:15:35 PAGE 2   

  55          void main(void)
  56          {
  57   1        P3 = 0X00;                      // Make Port 3 output 
  58   1        P2 = 0x00;                      // Make Port 2 output 
  59   1        P1 &= 0xEF;                     // Make P1 Pin4-7 output
  60   1        P0 &= 0xF0;                     // Make Port 0 Pins 0,1,2 output
  61   1        
  62   1        SPI_Init();
  63   1        LCD_Init();
  64   1        Timer_Init();
  65   1        
  66   1        while(1)                        // endless 
  67   1        {
  68   2          CS_BAR = 0;                 // enable ADC as slave     
  69   2          SPDAT= 0x01;                // Write start bit to start ADC 
  70   2          while(!transmit_completed); // wait end of transmition;TILL SPIF = 1 i.e. MSB of SPSTA
  71   2          transmit_completed = 0;     // clear software transfert flag 
  72   2          
  73   2          SPDAT= 0x80;        // 80H written to start ADC CH0 single ended sampling,refer ADC datasheet
  74   2          while(!transmit_completed); // wait end of transmition 
  75   2          data_save_high = serial_data & 0x03 ;  
  76   2          transmit_completed = 0;     // clear software transfer flag 
  77   2              
  78   2          SPDAT= 0x00;                // 
  79   2          while(!transmit_completed); // wait end of transmition 
  80   2          data_save_low = serial_data;
  81   2          transmit_completed = 0;     // clear software transfer flag 
  82   2          CS_BAR = 1;                 // disable ADC as slave
  83   2          
  84   2          adcVal = (data_save_high <<8) + (data_save_low);
  85   2          
  86   2          
  87   2        }
  88   1      }
  89          /**
  90           * FUNCTION_PURPOSE:interrupt
  91           * FUNCTION_INPUTS: void
  92           * FUNCTION_OUTPUTS: transmit_complete is software transfert flag
  93           */
  94          void it_SPI(void) interrupt 9 /* interrupt address is 0x004B, (Address -3)/8 = interrupt no.*/
  95          {
  96   1        switch  ( SPSTA )         /* read and clear spi status register */
  97   1        {
  98   2          case 0x80:  
  99   2            serial_data=SPDAT;   /* read receive data */
 100   2            transmit_completed=1;/* set software flag */
 101   2          break;
 102   2      
 103   2          case 0x10:
 104   2               /* put here for mode fault tasking */  
 105   2          break;
 106   2        
 107   2          case 0x40:
 108   2               /* put here for overrun tasking */ 
 109   2          break;
 110   2        }
 111   1      }
 112          //int count_overflow = 0;
 113          void timer0_ISR (void) interrupt 1
 114          {
 115   1        //TH0 &= 0x00;
 116   1        TH0 = 0x3C;//Initialize TH0
C51 COMPILER V9.55   SPI_HOMEWORK                                                          09/20/2016 17:15:35 PAGE 3   

 117   1        //TL0 &= 0x00;
 118   1        TL0 = 0xB0;//Initialize TL0
 119   1        //count_overflow ++;//Increment Overflow 
 120   1        //Write averaging of 10 samples code here
 121   1        
 122   1      }
 123          
 124          
 125          /**
 126          
 127           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
 128           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
 129           *                   P1.4(SSbar)
 130                               P1.6(SCK)
 131           */ 
 132          void SPI_Init()
 133          {
 134   1        CS_BAR = 1;                     // DISABLE ADC SLAVE SELECT-CS 
 135   1        SPCON |= 0x20;                  // P1.1(SSBAR) is available as standard I/O pin 
 136   1        SPCON |= 0x01;                  // Fclk Periph/4 AND Fclk Periph=12MHz ,HENCE SCK IE. BAUD RATE=3000KHz 
 137   1        SPCON |= 0x10;                  // Master mode 
 138   1        SPCON &= ~0x08;                 // CPOL=0; transmit mode example|| SCK is 0 at idle state
 139   1        SPCON |= 0x04;                  // CPHA=1; transmit mode example 
 140   1        IEN1 |= 0x04;                   // enable spi interrupt 
 141   1        EA=1;                           // enable interrupts 
 142   1        SPCON |= 0x40;                  // run spi;ENABLE SPI INTERFACE SPEN= 1 
 143   1      }
 144            /**
 145           * FUNCTION_PURPOSE:Timer Initialization
 146           * FUNCTION_INPUTS: void
 147           * FUNCTION_OUTPUTS: none
 148           */
 149          
 150          void Timer_Init()
 151          {
 152   1        // Set Timer0 to work in up counting 16 bit mode. Counts upto 
 153   1        // 65536 depending upon the calues of TH0 and TL0
 154   1        // The timer counts 65536 processor cycles. A processor cycle is 
 155   1        // 12 clocks. FOr 24 MHz, it takes 65536/2 uS to overflow
 156   1         
 157   1        //TH0 &= 0x00;
 158   1        TH0 = 0x3C;//Initialize TH0
 159   1        //TL0 &= 0x00;
 160   1        TL0 = 0xB0;//Initialize TL0
 161   1        TMOD = 0x01;//Configure TMOD 
 162   1        EA =1;
 163   1        ET0 = 1;//Set ET0
 164   1        TR0 = 1;//Set TR0
 165   1      }
 166            /**
 167           * FUNCTION_PURPOSE:LCD Initialization
 168           * FUNCTION_INPUTS: void
 169           * FUNCTION_OUTPUTS: none
 170           */
 171          void LCD_Init()
 172          {
 173   1        sdelay(100);
 174   1        LCD_CmdWrite(0x38);     // LCD 2lines, 5*7 matrix
 175   1        LCD_CmdWrite(0x0E);     // Display ON cursor ON  Blinking off
 176   1        LCD_CmdWrite(0x01);     // Clear the LCD
 177   1        LCD_CmdWrite(0x80);     // Cursor to First line First Position
 178   1      }
C51 COMPILER V9.55   SPI_HOMEWORK                                                          09/20/2016 17:15:35 PAGE 4   

 179          
 180          /**
 181           * FUNCTION_PURPOSE: Write Command to LCD
 182           * FUNCTION_INPUTS: cmd- command to be written
 183           * FUNCTION_OUTPUTS: none
 184           */
 185          void LCD_CmdWrite(char cmd)
 186          {
 187   1        LCD_Ready();
 188   1        LCD_data=cmd;           // Send the command to LCD
 189   1        LCD_rs=0;               // Select the Command Register by pulling LCD_rs LOW
 190   1        LCD_rw=0;               // Select the Write Operation  by pulling RW LOW
 191   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 192   1        sdelay(5);
 193   1        LCD_en=0;
 194   1        sdelay(5);
 195   1      }
 196          
 197          /**
 198           * FUNCTION_PURPOSE: Write Command to LCD
 199           * FUNCTION_INPUTS: dat- data to be written
 200           * FUNCTION_OUTPUTS: none
 201           */
 202          void LCD_DataWrite( char dat)
 203          {
 204   1        LCD_Ready();
 205   1        LCD_data=dat;           // Send the data to LCD
 206   1        LCD_rs=1;               // Select the Data Register by pulling LCD_rs HIGH
 207   1        LCD_rw=0;               // Select the Write Operation by pulling RW LOW
 208   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 209   1        sdelay(5);
 210   1        LCD_en=0;
 211   1        sdelay(5);
 212   1      }
 213          /**
 214           * FUNCTION_PURPOSE: Write a string on the LCD Screen
 215           * FUNCTION_INPUTS: 1. str - pointer to the string to be written, 
 216                              2. length - length of the array
 217           * FUNCTION_OUTPUTS: none
 218           */
 219          void LCD_StringWrite( char * str, unsigned char length)
 220          {
 221   1          while(length>0)
 222   1          {
 223   2              LCD_DataWrite(*str);
 224   2              str++;
 225   2              length--;
 226   2          }
 227   1      }
 228          
 229          /**
 230           * FUNCTION_PURPOSE: To check if the LCD is ready to communicate
 231           * FUNCTION_INPUTS: void
 232           * FUNCTION_OUTPUTS: none
 233           */
 234          void LCD_Ready()
 235          {
 236   1        LCD_data = 0xFF;
 237   1        LCD_rs = 0;
 238   1        LCD_rw = 1;
 239   1        LCD_en = 0;
 240   1        sdelay(5);
C51 COMPILER V9.55   SPI_HOMEWORK                                                          09/20/2016 17:15:35 PAGE 5   

 241   1        LCD_en = 1;
 242   1        while(LCD_busy == 1)
 243   1        {
 244   2          LCD_en = 0;
 245   2          LCD_en = 1;
 246   2        }
 247   1        LCD_en = 0;
 248   1      }
 249          
 250          /**
 251           * FUNCTION_PURPOSE: A delay of 15us for a 24 MHz crystal
 252           * FUNCTION_INPUTS: void
 253           * FUNCTION_OUTPUTS: none
 254           */
 255          void sdelay(int delay)
 256          {
 257   1        char d=0;
 258   1        while(delay>0)
 259   1        {
 260   2          for(d=0;d<5;d++);
 261   2          delay--;
 262   2        }
 263   1      }
 264          
 265          /**
 266           * FUNCTION_PURPOSE: A delay of around 1000us for a 24MHz crystel
 267           * FUNCTION_INPUTS: void
 268           * FUNCTION_OUTPUTS: none
 269           */
 270          void delay_ms(int delay)
 271          {
 272   1        int d=0;
 273   1        while(delay>0)
 274   1        {
 275   2          for(d=0;d<382;d++);
 276   2          delay--;
 277   2        }
 278   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    357    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     25       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
