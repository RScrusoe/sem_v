C51 COMPILER V9.56.0.0   SPI                                                               09/18/2016 23:43:18 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN .\Objects\spi.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE spi.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\spi.l
                    -st) TABS(2) OBJECT(.\Objects\spi.obj)

line level    source

   1          /**
   2           SPI HOMEWORK2 , LABWORK2 (SAME PROGRAM)
   3           */
   4          
   5          /* @section  I N C L U D E S */
   6          #include "at89c5131.h"
   7          #include "stdio.h"
   8          #define LCD_data  P2                // LCD Data port
   9          
  10          void SPI_Init();
  11          void LCD_Init();
  12          void Timer_Init();
  13          void LCD_DataWrite(char dat);
  14          void LCD_CmdWrite(char cmd);
  15          void LCD_StringWrite(char * str, unsigned char len);
  16          void LCD_Ready();
  17          void sdelay(int delay);
  18          void delay_ms(int delay);
  19          char int_to_string(int val);
  20          unsigned int a=0;
  21          
  22          sbit CS_BAR = P1^4;                 // Chip Select for the ADC
  23          sbit LCD_rs = P0^0;                 // LCD Register Select
  24          sbit LCD_rw = P0^1;                 // LCD Read/Write
  25          sbit LCD_en = P0^2;                 // LCD Enable
  26          sbit LCD_busy = P2^7;               // LCD Busy Flag
  27          sbit ONULL = P1^0;
  28          bit transmit_completed= 0;          // To check if spi data transmit is complete
  29          bit offset_null = 0;                // Check if offset nulling is enabled
  30          bit roundoff = 0;
  31          int adcVal=0, avgVal=0, initVal=0, adcValue = 0;
  32          unsigned char serial_data;
  33          unsigned char data_save_high;
  34          unsigned char data_save_low;
  35          unsigned char count=0, i=0;
  36          unsigned char weight[4];
  37          unsigned char voltage[4];
  38          float fweight=0;
  39          
  40          /**
  41          
  42           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
  43           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
  44           *                   P1.4(SSbar)
  45                               P1.6(SCK)
  46           */
  47           
  48          void main(void)
  49          {
  50   1        P3 = 0X00;                      // Make Port 3 output 
  51   1        P2 = 0x00;                      // Make Port 2 output 
  52   1        P1 &= 0xEF;                     // Make P1 Pin4-7 output
  53   1        P0 &= 0xF0;                     // Make Port 0 Pins 0,1,2 output
  54   1        
C51 COMPILER V9.56.0.0   SPI                                                               09/18/2016 23:43:18 PAGE 2   

  55   1        SPI_Init();
  56   1        LCD_Init();
  57   1        Timer_Init();
  58   1        
  59   1        while(1)                        // endless 
  60   1        {
  61   2          CS_BAR = 0;                 // enable ADC as slave     
  62   2          SPDAT= 0x01;                // Write start bit to start ADC 
  63   2          while(!transmit_completed); // wait end of transmition;TILL SPIF = 1 i.e. MSB of SPSTA
  64   2          transmit_completed = 0;     // clear software transfert flag 
  65   2          
  66   2          SPDAT= 0x80;        // 80H written to start ADC CH0 single ended sampling,refer ADC datasheet
  67   2          while(!transmit_completed); // wait end of transmition 
  68   2          data_save_high = serial_data & 0x03 ;  
  69   2          transmit_completed = 0;     // clear software transfer flag 
  70   2              
  71   2          SPDAT= 0x00;                // 
  72   2          while(!transmit_completed); // wait end of transmition 
  73   2          data_save_low = serial_data;
  74   2          transmit_completed = 0;     // clear software transfer flag 
  75   2          CS_BAR = 1;                 // disable ADC as slave
  76   2          
  77   2          adcVal = (data_save_high <<8) + (data_save_low);
  78   2          
  79   2          
  80   2        }
  81   1      }
  82          /**
  83           * FUNCTION_PURPOSE:interrupt
  84           * FUNCTION_INPUTS: void
  85           * FUNCTION_OUTPUTS: transmit_complete is software transfert flag
  86           */
  87          void it_SPI(void) interrupt 9 /* interrupt address is 0x004B, (Address -3)/8 = interrupt no.*/
  88          {
  89   1        switch  ( SPSTA )         /* read and clear spi status register */
  90   1        {
  91   2          case 0x80:  
  92   2            serial_data=SPDAT;   /* read receive data */
  93   2            transmit_completed=1;/* set software flag */
  94   2          break;
  95   2      
  96   2          case 0x10:
  97   2               /* put here for mode fault tasking */  
  98   2          break;
  99   2        
 100   2          case 0x40:
 101   2               /* put here for overrun tasking */ 
 102   2          break;
 103   2        }
 104   1      }
 105          
 106          void timer0_ISR (void) interrupt 1
 107          {
 108   1        TH0 = 0x3C; //Initialize TH0
 109   1        TL0 = 0xB0; //Initialize TL0
 110   1        a=a+1;//Increment Overflow 
 111   1        //Write averaging of 10 samples code here
 112   1      
 113   1      }
 114          
 115          
 116          /**
C51 COMPILER V9.56.0.0   SPI                                                               09/18/2016 23:43:18 PAGE 3   

 117          
 118           * FUNCTION_INPUTS:  P1.5(MISO) serial input  
 119           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
 120           *                   P1.4(SSbar)
 121                               P1.6(SCK)
 122           */ 
 123          void SPI_Init()
 124          {
 125   1        CS_BAR = 1;                     // DISABLE ADC SLAVE SELECT-CS 
 126   1        SPCON |= 0x20;                  // P1.1(SSBAR) is available as standard I/O pin 
 127   1        SPCON |= 0x01;                  // Fclk Periph/4 AND Fclk Periph=12MHz ,HENCE SCK IE. BAUD RATE=3000KHz 
 128   1        SPCON |= 0x10;                  // Master mode 
 129   1        SPCON &= ~0x08;                 // CPOL=0; transmit mode example|| SCK is 0 at idle state
 130   1        SPCON |= 0x04;                  // CPHA=1; transmit mode example 
 131   1        IEN1 |= 0x04;                   // enable spi interrupt 
 132   1        EA=1;                           // enable interrupts 
 133   1        SPCON |= 0x40;                  // run spi;ENABLE SPI INTERFACE SPEN= 1 
 134   1      }
 135            /**
 136           * FUNCTION_PURPOSE:Timer Initialization
 137           * FUNCTION_INPUTS: void
 138           * FUNCTION_OUTPUTS: none
 139           */
 140          
 141          void Timer_Init()
 142          {
 143   1        // Set Timer0 to work in up counting 16 bit mode. Counts upto 
 144   1        // 65536 depending upon the calues of TH0 and TL0
 145   1        // The timer counts 65536 processor cycles. A processor cycle is 
 146   1        // 12 clocks. FOr 24 MHz, it takes 65536/2 uS to overflow
 147   1          
 148   1        TH0 = 0x3C; //Initialize TH0
 149   1        TL0 = 0xB0; //Initialize TL0
 150   1        TMOD = 0x01; ;  //Configure TMOD 
 151   1        ET0 = 1;  //Set ET0
 152   1        TR0 = 1;//Set TR0
 153   1      }
 154            /**
 155           * FUNCTION_PURPOSE:LCD Initialization
 156           * FUNCTION_INPUTS: void
 157           * FUNCTION_OUTPUTS: none
 158           */
 159          void LCD_Init()
 160          {
 161   1        sdelay(100);
 162   1        LCD_CmdWrite(0x38);     // LCD 2lines, 5*7 matrix
 163   1        LCD_CmdWrite(0x0E);     // Display ON cursor ON  Blinking off
 164   1        LCD_CmdWrite(0x01);     // Clear the LCD
 165   1        LCD_CmdWrite(0x80);     // Cursor to First line First Position
 166   1      }
 167          
 168          /**
 169           * FUNCTION_PURPOSE: Write Command to LCD
 170           * FUNCTION_INPUTS: cmd- command to be written
 171           * FUNCTION_OUTPUTS: none
 172           */
 173          void LCD_CmdWrite(char cmd)
 174          {
 175   1        LCD_Ready();
 176   1        LCD_data=cmd;           // Send the command to LCD
 177   1        LCD_rs=0;               // Select the Command Register by pulling LCD_rs LOW
 178   1        LCD_rw=0;               // Select the Write Operation  by pulling RW LOW
C51 COMPILER V9.56.0.0   SPI                                                               09/18/2016 23:43:18 PAGE 4   

 179   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 180   1        sdelay(5);
 181   1        LCD_en=0;
 182   1        sdelay(5);
 183   1      }
 184          
 185          /**
 186           * FUNCTION_PURPOSE: Write Command to LCD
 187           * FUNCTION_INPUTS: dat- data to be written
 188           * FUNCTION_OUTPUTS: none
 189           */
 190          void LCD_DataWrite( char dat)
 191          {
 192   1        LCD_Ready();
 193   1        LCD_data=dat;           // Send the data to LCD
 194   1        LCD_rs=1;               // Select the Data Register by pulling LCD_rs HIGH
 195   1        LCD_rw=0;               // Select the Write Operation by pulling RW LOW
 196   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 197   1        sdelay(5);
 198   1        LCD_en=0;
 199   1        sdelay(5);
 200   1      }
 201          /**
 202           * FUNCTION_PURPOSE: Write a string on the LCD Screen
 203           * FUNCTION_INPUTS: 1. str - pointer to the string to be written, 
 204                              2. length - length of the array
 205           * FUNCTION_OUTPUTS: none
 206           */
 207          void LCD_StringWrite( char * str, unsigned char length)
 208          {
 209   1          while(length>0)
 210   1          {
 211   2              LCD_DataWrite(*str);
 212   2              str++;
 213   2              length--;
 214   2          }
 215   1      }
 216          
 217          /**
 218           * FUNCTION_PURPOSE: To check if the LCD is ready to communicate
 219           * FUNCTION_INPUTS: void
 220           * FUNCTION_OUTPUTS: none
 221           */
 222          void LCD_Ready()
 223          {
 224   1        LCD_data = 0xFF;
 225   1        LCD_rs = 0;
 226   1        LCD_rw = 1;
 227   1        LCD_en = 0;
 228   1        sdelay(5);
 229   1        LCD_en = 1;
 230   1        while(LCD_busy == 1)
 231   1        {
 232   2          LCD_en = 0;
 233   2          LCD_en = 1;
 234   2        }
 235   1        LCD_en = 0;
 236   1      }
 237          
 238          /**
 239           * FUNCTION_PURPOSE: A delay of 15us for a 24 MHz crystal
 240           * FUNCTION_INPUTS: void
C51 COMPILER V9.56.0.0   SPI                                                               09/18/2016 23:43:18 PAGE 5   

 241           * FUNCTION_OUTPUTS: none
 242           */
 243          void sdelay(int delay)
 244          {
 245   1        char d=0;
 246   1        while(delay>0)
 247   1        {
 248   2          for(d=0;d<5;d++);
 249   2          delay--;
 250   2        }
 251   1      }
 252          
 253          /**
 254           * FUNCTION_PURPOSE: A delay of around 1000us for a 24MHz crystel
 255           * FUNCTION_INPUTS: void
 256           * FUNCTION_OUTPUTS: none
 257           */
 258          void delay_ms(int delay)
 259          {
 260   1        int d=0;
 261   1        while(delay>0)
 262   1        {
 263   2          for(d=0;d<382;d++);
 264   2          delay--;
 265   2        }
 266   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    367    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     27       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
